Traceback (most recent call last):
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/asyncio/base_events.py", line 583, in run_until_complete
    return future.result()
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 536, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/Alvin/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# The "json" module can do a much better job:
import json
import pprint
print(json.dumps(my_mapping, indent=4, sort_keys=True))


# Note this only works with dicts containing
# primitive types (check out the "pprint" module):
json.dumps({all: 'yup'})

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-13-6bca295b66e7>[0m in [0;36m<module>[0;34m[0m
[1;32m      7[0m [0;31m# Note this only works with dicts containing[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m [0;31m# primitive types (check out the "pprint" module):[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 9[0;31m [0mjson[0m[0;34m.[0m[0mdumps[0m[0;34m([0m[0;34m{[0m[0mall[0m[0;34m:[0m [0;34m'yup'[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/opt/anaconda3/lib/python3.7/json/__init__.py[0m in [0;36mdumps[0;34m(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)[0m
[1;32m    229[0m         [0mcls[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m [0mindent[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m [0mseparators[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m[0;34m[0m[0;34m[0m[0m
[1;32m    230[0m         default is None and not sort_keys and not kw):
[0;32m--> 231[0;31m         [0;32mreturn[0m [0m_default_encoder[0m[0;34m.[0m[0mencode[0m[0;34m([0m[0mobj[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    232[0m     [0;32mif[0m [0mcls[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    233[0m         [0mcls[0m [0;34m=[0m [0mJSONEncoder[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/lib/python3.7/json/encoder.py[0m in [0;36mencode[0;34m(self, o)[0m
[1;32m    197[0m         [0;31m# exceptions aren't as detailed.  The list call should be roughly[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    198[0m         [0;31m# equivalent to the PySequence_Fast that ''.join() would do.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 199[0;31m         [0mchunks[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0miterencode[0m[0;34m([0m[0mo[0m[0;34m,[0m [0m_one_shot[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    200[0m         [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mchunks[0m[0;34m,[0m [0;34m([0m[0mlist[0m[0;34m,[0m [0mtuple[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    201[0m             [0mchunks[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mchunks[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/opt/anaconda3/lib/python3.7/json/encoder.py[0m in [0;36miterencode[0;34m(self, o, _one_shot)[0m
[1;32m    255[0m                 [0mself[0m[0;34m.[0m[0mkey_separator[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mitem_separator[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0msort_keys[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    256[0m                 self.skipkeys, _one_shot)
[0;32m--> 257[0;31m         [0;32mreturn[0m [0m_iterencode[0m[0;34m([0m[0mo[0m[0;34m,[0m [0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    258[0m [0;34m[0m[0m
[1;32m    259[0m def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,

[0;31mTypeError[0m: keys must be str, int, float, bool or None, not builtin_function_or_method
TypeError: keys must be str, int, float, bool or None, not builtin_function_or_method

