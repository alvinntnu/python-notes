C-->D(Update the Weights)
D-->A
")
nnflow %>% export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-flowchart.png", width=1600)
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow %>% export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-flowchart.png", width=1600)
nn_flow<-mermaid("
graph TB
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow %>% export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-flowchart.png", width=1600)
?grViz
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
nn_flow %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/neural-network-flowchart2.png")
nn_flow %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/test.png")
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
#plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
nn_flow %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/test.png")
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
#plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
nn_flow %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/test.png", vwidth = 1024)
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
# nn_flow %>%
#   htmltools::html_print() %>%
#   webshot::webshot(file = "./images/test.png", vwidth = 1024)
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
# nn_flow %>%
#   htmltools::html_print() %>%
#   webshot::webshot(file = "./images/test.png", vwidth = 1024)
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
#plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
nn_flow %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/test.png", vwidth = 1024)
graph <- mermaid("
gantt
dateFormat  HH:mm:ss.SSS
title Sample Test Gantt
section A
thing1          :   15:58:51.556,   16:05:23.494
section B
thing2          :   16:02:00.391,   16:20:46.533
section C
thing3          :   16:18:57.352,   16:23:10.700
thing4          :   16:24:11.705,   16:30:30.432
")
graph %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/gannt.pdf")
library(DiagrammeR)
library(DiagrammeRsvg)
library(magrittr)
library(rsvg)
knitr::opts_chunk$set(echo = TRUE)
graph <- mermaid("
gantt
dateFormat  HH:mm:ss.SSS
title Sample Test Gantt
section A
thing1          :   15:58:51.556,   16:05:23.494
section B
thing2          :   16:02:00.391,   16:20:46.533
section C
thing3          :   16:18:57.352,   16:23:10.700
thing4          :   16:24:11.705,   16:30:30.432
")
graph %>%
htmltools::html_print() %>%
webshot::webshot(file = "./images/gannt.pdf")
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
#plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
#
#  nn_flow %>%
#    htmltools::html_print() %>%
#    webshot::webshot(file = "./images/test.png", vwidth = 1024)
nn_flow<-mermaid("
graph TB
ROOT(Neural Network)-->A
A(Forward Propagation)-->B(Calculate Total Error)
B-->C(Calculate Gradients)
C-->D(Update the Weights)
D-->A
")
nn_flow
#plotly::export(nn_flow, file = "./images/neural-network-flowchart2.png")
#
#  nn_flow %>%
#    htmltools::html_print() %>%
#    webshot::webshot(file = "./images/test.png", vwidth = 1024)
G3 <- 'digraph G {
rankdir = LR;
splines=false;
edge[style=invis];
ranksep= 1.4;
{
node [shape=circle, color=yellow, style=filled, fillcolor=yellow];
x0 [label=<x<sub>0</sub>>];
a01 [label=<a<sub>0</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse];
x1 [label=<x<sub>1</sub>>];
x2 [label=<x<sub>2</sub>>];
}
{
node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue];
a11 [label=<a<sub>1</sub><sup>(1)</sup>>];
a21 [label=<a<sub>2</sub><sup>(1)</sup>>];
a31 [label=<a<sub>3</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=coral1];
y1 [label=<y<sub>1</sub>>];
y2 [label=<y<sub>2</sub>>];
}
{
rank=same;
x0->x1->x2;
}
{
rank=same;
a01->a11->a21->a31;
}
{
rank=same;
y1->y2;
}
a01->y1;  // prevent tilting
l0 [shape=plaintext, label="layer 1 (input layer)"];
l0->x0;
{rank=same; l0;x0};
l1 [shape=plaintext, label="layer 2 (hidden layer)"];
l1->a01;
{rank=same; l1;a01};
l2 [shape=plaintext, label="layer 3 (output layer)"];
l2->y1;
{rank=same; l2;y1}
edge[style=solid, tailport=e, headport=w, color=grey];
{x0;x1;x2} -> {a11;a21;a31};
{a01;a11;a21;a31} -> {y1;y2};
x1 -> a11 [ label= <w<sub>11</sub><sup>(1)</sup>>, color=black];
x0 -> a11 [ label= <b<sub>1</sub>>, color=black];
x2 -> a11 [ label= <w<sub>21</sub><sup>(1)</sup>>, color=black];
}'
grViz(G3, width="100%")
grViz(G3) %>%
export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-sample2.png", width=1600)
G4 <- 'digraph G {
rankdir = LR;
splines=false;
edge[style=invis];
ranksep= 1.4;
{
node [shape=circle, color=yellow, style=filled, fillcolor=yellow];
x0 [label=<x<sub>0</sub>>];
a01 [label=<a<sub>0</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse];
x1 [label=<x<sub>1</sub>>];
x2 [label=<x<sub>2</sub>>];
}
{
node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue];
a11 [label=<a<sub>1</sub><sup>(1)</sup>>];
a21 [label=<a<sub>2</sub><sup>(1)</sup>>];
a31 [label=<a<sub>3</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=coral1];
y1 [label=<y<sub>1</sub>>];
y2 [label=<y<sub>2</sub>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=lightblue];
l [label=<L>];
}
{
rank=same;
x0->x1->x2;
}
{
rank=same;
a01->a11->a21->a31;
}
{
rank=same;
y1->y2;
}
a01->y1;  // prevent tilting
l0 [shape=plaintext, label="layer 1 (input layer)"];
l0->x0;
{rank=same; l0;x0};
l1 [shape=plaintext, label="layer 2 (hidden layer)"];
l1->a01;
{rank=same; l1;a01};
l2 [shape=plaintext, label="layer 3 (output layer)"];
l2->y1;
{rank=same; l2;y1}
edge[style=solid, tailport=e, headport=w, color=grey];
{x0;x1;x2} -> {a11;a21;a31};
{a01;a11;a21;a31} -> {y1;y2};
x1 -> a11 [ label= <w<sub>11</sub><sup>(1)</sup>>, color=black];
x0 -> a11 [ label= <b<sub>1</sub>>, color=black];
x2 -> a11 [ label= <w<sub>21</sub><sup>(1)</sup>>, color=black];
y1 -> l
y2 -> l
}'
grViz(G4, width="100%")
#
# grViz(G3) %>%
# export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-sample3.png", width=1600)
G4 <- 'digraph G {
rankdir = LR;
splines=false;
edge[style=invis];
ranksep= 1.4;
{
node [shape=circle, color=yellow, style=filled, fillcolor=yellow];
x0 [label=<x<sub>0</sub>>];
a01 [label=<a<sub>0</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse];
x1 [label=<x<sub>1</sub>>];
x2 [label=<x<sub>2</sub>>];
}
{
node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue];
a11 [label=<a<sub>1</sub><sup>(1)</sup>>];
a21 [label=<a<sub>2</sub><sup>(1)</sup>>];
a31 [label=<a<sub>3</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=coral1];
y1 [label=<y<sub>1</sub>>];
y2 [label=<y<sub>2</sub>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=lightblue];
l [label=<L>];
}
{
rank=same;
x0->x1->x2;
}
{
rank=same;
a01->a11->a21->a31;
}
{
rank=same;
y1->y2;
}
a01->y1;  // prevent tilting
l0 [shape=plaintext, label="layer 1 (input layer)"];
l0->x0;
{rank=same; l0;x0};
l1 [shape=plaintext, label="layer 2 (hidden layer)"];
l1->a01;
{rank=same; l1;a01};
l2 [shape=plaintext, label="layer 3 (output layer)"];
l2->y1;
{rank=same; l2;y1}
l3 [shape=plaintext, label="Loss Function"];
l3->l;
{rank=same; l3;l}
edge[style=solid, tailport=e, headport=w, color=grey];
{x0;x1;x2} -> {a11;a21;a31};
{a01;a11;a21;a31} -> {y1;y2};
x1 -> a11 [ label= <w<sub>11</sub><sup>(1)</sup>>, color=black];
x0 -> a11 [ label= <b<sub>1</sub>>, color=black];
x2 -> a11 [ label= <w<sub>21</sub><sup>(1)</sup>>, color=black];
y1 -> l
y2 -> l
}'
grViz(G4, width="100%")
#
# grViz(G3) %>%
# export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-sample3.png", width=1600)
G4 <- 'digraph G {
rankdir = LR;
splines=false;
edge[style=invis];
ranksep= 1.4;
{
node [shape=circle, color=yellow, style=filled, fillcolor=yellow];
x0 [label=<x<sub>0</sub>>];
a01 [label=<a<sub>0</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse];
x1 [label=<x<sub>1</sub>>];
x2 [label=<x<sub>2</sub>>];
}
{
node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue];
a11 [label=<a<sub>1</sub><sup>(1)</sup>>];
a21 [label=<a<sub>2</sub><sup>(1)</sup>>];
a31 [label=<a<sub>3</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=coral1];
y1 [label=<y<sub>1</sub>>];
y2 [label=<y<sub>2</sub>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=lightblue];
l [label=<L>];
}
{
rank=same;
x0->x1->x2;
}
{
rank=same;
a01->a11->a21->a31;
}
{
rank=same;
y1->y2;
}
a01->y1;  // prevent tilting
l0 [shape=plaintext, label="layer 1 (input layer)"];
l0->x0;
{rank=same; l0;x0};
l1 [shape=plaintext, label="layer 2 (hidden layer)"];
l1->a01;
{rank=same; l1;a01};
l2 [shape=plaintext, label="layer 3 (output layer)"];
l2->y1;
{rank=same; l2;y1}
l3 [shape=plaintext, label="Loss Function"];
l3->l;
{rank=same; l3;l}
edge[style=solid, tailport=e, headport=w, color=grey];
{x0;x1;x2} -> {a11;a21;a31};
{a01;a11;a21;a31} -> {y1;y2};
y1 -> l
y2 -> l
}'
grViz(G4, width="100%")
#
# grViz(G3) %>%
# export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-sample3.png", width=1600)
G4 <- 'digraph G {
rankdir = LR;
splines=false;
edge[style=invis];
ranksep= 1.4;
{
node [shape=circle, color=yellow, style=filled, fillcolor=yellow];
x0 [label=<x<sub>0</sub>>];
a01 [label=<a<sub>0</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse];
x1 [label=<x<sub>1</sub>>];
x2 [label=<x<sub>2</sub>>];
}
{
node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue];
a11 [label=<a<sub>1</sub><sup>(1)</sup>>];
a21 [label=<a<sub>2</sub><sup>(1)</sup>>];
a31 [label=<a<sub>3</sub><sup>(1)</sup>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=coral1];
y1 [label=<y<sub>1</sub>>];
y2 [label=<y<sub>2</sub>>];
}
{
node [shape=circle, color=coral1, style=filled, fillcolor=lightblue];
l [label=<L>];
}
{
rank=same;
x0->x1->x2;
}
{
rank=same;
a01->a11->a21->a31;
}
{
rank=same;
y1->y2;
}
a01->y1;  // prevent tilting
l0 [shape=plaintext, label="layer 1 (input layer)"];
l0->x0;
{rank=same; l0;x0};
l1 [shape=plaintext, label="layer 2 (hidden layer)"];
l1->a01;
{rank=same; l1;a01};
l2 [shape=plaintext, label="layer 3 (output layer)"];
l2->y1;
{rank=same; l2;y1}
l3 [shape=plaintext, label="Loss Function"];
l3->l;
{rank=same; l3;l}
edge[style=solid, tailport=e, headport=w, color=grey];
{x0;x1;x2} -> {a11;a21;a31};
{a01;a11;a21;a31} -> {y1;y2};
y1 -> l
y2 -> l
}'
grViz(G4, width="100%")
grViz(G4) %>%
export_svg %>% charToRaw %>% rsvg_png("./images/neural-network-sample3.png", width=1600)
